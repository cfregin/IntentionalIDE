/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : JavaScript.g
 *     -                            On : 2010-03-30 03:18:10
 *     -                for the parser : JavaScriptParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser JavaScriptParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pJavaScriptParser, which is returned from a call to JavaScriptParserNew().
 *
 * The methods in pJavaScriptParser are  as follows:
 *
 *  - JavaScriptParser_program_return      pJavaScriptParser->program(pJavaScriptParser)
 *  - JavaScriptParser_sourceElements_return      pJavaScriptParser->sourceElements(pJavaScriptParser)
 *  - JavaScriptParser_sourceElement_return      pJavaScriptParser->sourceElement(pJavaScriptParser)
 *  - JavaScriptParser_functionDeclaration_return      pJavaScriptParser->functionDeclaration(pJavaScriptParser)
 *  - JavaScriptParser_functionExpression_return      pJavaScriptParser->functionExpression(pJavaScriptParser)
 *  - JavaScriptParser_formalParameterList_return      pJavaScriptParser->formalParameterList(pJavaScriptParser)
 *  - JavaScriptParser_functionBody_return      pJavaScriptParser->functionBody(pJavaScriptParser)
 *  - JavaScriptParser_statement_return      pJavaScriptParser->statement(pJavaScriptParser)
 *  - JavaScriptParser_statementBlock_return      pJavaScriptParser->statementBlock(pJavaScriptParser)
 *  - JavaScriptParser_statementList_return      pJavaScriptParser->statementList(pJavaScriptParser)
 *  - JavaScriptParser_variableStatement_return      pJavaScriptParser->variableStatement(pJavaScriptParser)
 *  - JavaScriptParser_variableDeclarationList_return      pJavaScriptParser->variableDeclarationList(pJavaScriptParser)
 *  - JavaScriptParser_variableDeclarationListNoIn_return      pJavaScriptParser->variableDeclarationListNoIn(pJavaScriptParser)
 *  - JavaScriptParser_variableDeclaration_return      pJavaScriptParser->variableDeclaration(pJavaScriptParser)
 *  - JavaScriptParser_variableDeclarationNoIn_return      pJavaScriptParser->variableDeclarationNoIn(pJavaScriptParser)
 *  - JavaScriptParser_initialiser_return      pJavaScriptParser->initialiser(pJavaScriptParser)
 *  - JavaScriptParser_initialiserNoIn_return      pJavaScriptParser->initialiserNoIn(pJavaScriptParser)
 *  - JavaScriptParser_emptyStatement_return      pJavaScriptParser->emptyStatement(pJavaScriptParser)
 *  - JavaScriptParser_expressionStatement_return      pJavaScriptParser->expressionStatement(pJavaScriptParser)
 *  - JavaScriptParser_ifStatement_return      pJavaScriptParser->ifStatement(pJavaScriptParser)
 *  - JavaScriptParser_iterationStatement_return      pJavaScriptParser->iterationStatement(pJavaScriptParser)
 *  - JavaScriptParser_doWhileStatement_return      pJavaScriptParser->doWhileStatement(pJavaScriptParser)
 *  - JavaScriptParser_whileStatement_return      pJavaScriptParser->whileStatement(pJavaScriptParser)
 *  - JavaScriptParser_forStatement_return      pJavaScriptParser->forStatement(pJavaScriptParser)
 *  - JavaScriptParser_forStatementInitialiserPart_return      pJavaScriptParser->forStatementInitialiserPart(pJavaScriptParser)
 *  - JavaScriptParser_forInStatement_return      pJavaScriptParser->forInStatement(pJavaScriptParser)
 *  - JavaScriptParser_forInStatementInitialiserPart_return      pJavaScriptParser->forInStatementInitialiserPart(pJavaScriptParser)
 *  - JavaScriptParser_continueStatement_return      pJavaScriptParser->continueStatement(pJavaScriptParser)
 *  - JavaScriptParser_breakStatement_return      pJavaScriptParser->breakStatement(pJavaScriptParser)
 *  - JavaScriptParser_returnStatement_return      pJavaScriptParser->returnStatement(pJavaScriptParser)
 *  - JavaScriptParser_withStatement_return      pJavaScriptParser->withStatement(pJavaScriptParser)
 *  - JavaScriptParser_labelledStatement_return      pJavaScriptParser->labelledStatement(pJavaScriptParser)
 *  - JavaScriptParser_switchStatement_return      pJavaScriptParser->switchStatement(pJavaScriptParser)
 *  - JavaScriptParser_caseBlock_return      pJavaScriptParser->caseBlock(pJavaScriptParser)
 *  - JavaScriptParser_caseClause_return      pJavaScriptParser->caseClause(pJavaScriptParser)
 *  - JavaScriptParser_defauDLTClause_return      pJavaScriptParser->defauDLTClause(pJavaScriptParser)
 *  - JavaScriptParser_throwStatement_return      pJavaScriptParser->throwStatement(pJavaScriptParser)
 *  - JavaScriptParser_tryStatement_return      pJavaScriptParser->tryStatement(pJavaScriptParser)
 *  - JavaScriptParser_catchClause_return      pJavaScriptParser->catchClause(pJavaScriptParser)
 *  - JavaScriptParser_finallyClause_return      pJavaScriptParser->finallyClause(pJavaScriptParser)
 *  - JavaScriptParser_expression_return      pJavaScriptParser->expression(pJavaScriptParser)
 *  - JavaScriptParser_expressionNoIn_return      pJavaScriptParser->expressionNoIn(pJavaScriptParser)
 *  - JavaScriptParser_assignmentExpression_return      pJavaScriptParser->assignmentExpression(pJavaScriptParser)
 *  - JavaScriptParser_assignmentExpressionNoIn_return      pJavaScriptParser->assignmentExpressionNoIn(pJavaScriptParser)
 *  - JavaScriptParser_leftHandSideExpression_return      pJavaScriptParser->leftHandSideExpression(pJavaScriptParser)
 *  - JavaScriptParser_newExpression_return      pJavaScriptParser->newExpression(pJavaScriptParser)
 *  - JavaScriptParser_memberExpression_return      pJavaScriptParser->memberExpression(pJavaScriptParser)
 *  - JavaScriptParser_memberExpressionSuffix_return      pJavaScriptParser->memberExpressionSuffix(pJavaScriptParser)
 *  - JavaScriptParser_callExpression_return      pJavaScriptParser->callExpression(pJavaScriptParser)
 *  - JavaScriptParser_callExpressionSuffix_return      pJavaScriptParser->callExpressionSuffix(pJavaScriptParser)
 *  - JavaScriptParser_arguments_return      pJavaScriptParser->arguments(pJavaScriptParser)
 *  - JavaScriptParser_indexSuffix_return      pJavaScriptParser->indexSuffix(pJavaScriptParser)
 *  - JavaScriptParser_propertyReferenceSuffix_return      pJavaScriptParser->propertyReferenceSuffix(pJavaScriptParser)
 *  - JavaScriptParser_assignmentOperator_return      pJavaScriptParser->assignmentOperator(pJavaScriptParser)
 *  - JavaScriptParser_conditionalExpression_return      pJavaScriptParser->conditionalExpression(pJavaScriptParser)
 *  - JavaScriptParser_conditionalExpressionNoIn_return      pJavaScriptParser->conditionalExpressionNoIn(pJavaScriptParser)
 *  - JavaScriptParser_logicalORExpression_return      pJavaScriptParser->logicalORExpression(pJavaScriptParser)
 *  - JavaScriptParser_logicalORExpressionNoIn_return      pJavaScriptParser->logicalORExpressionNoIn(pJavaScriptParser)
 *  - JavaScriptParser_logicalANDExpression_return      pJavaScriptParser->logicalANDExpression(pJavaScriptParser)
 *  - JavaScriptParser_logicalANDExpressionNoIn_return      pJavaScriptParser->logicalANDExpressionNoIn(pJavaScriptParser)
 *  - JavaScriptParser_bitwiseORExpression_return      pJavaScriptParser->bitwiseORExpression(pJavaScriptParser)
 *  - JavaScriptParser_bitwiseORExpressionNoIn_return      pJavaScriptParser->bitwiseORExpressionNoIn(pJavaScriptParser)
 *  - JavaScriptParser_bitwiseXORExpression_return      pJavaScriptParser->bitwiseXORExpression(pJavaScriptParser)
 *  - JavaScriptParser_bitwiseXORExpressionNoIn_return      pJavaScriptParser->bitwiseXORExpressionNoIn(pJavaScriptParser)
 *  - JavaScriptParser_bitwiseANDExpression_return      pJavaScriptParser->bitwiseANDExpression(pJavaScriptParser)
 *  - JavaScriptParser_bitwiseANDExpressionNoIn_return      pJavaScriptParser->bitwiseANDExpressionNoIn(pJavaScriptParser)
 *  - JavaScriptParser_equalityExpression_return      pJavaScriptParser->equalityExpression(pJavaScriptParser)
 *  - JavaScriptParser_equalityExpressionNoIn_return      pJavaScriptParser->equalityExpressionNoIn(pJavaScriptParser)
 *  - JavaScriptParser_relationalExpression_return      pJavaScriptParser->relationalExpression(pJavaScriptParser)
 *  - JavaScriptParser_relationalExpressionNoIn_return      pJavaScriptParser->relationalExpressionNoIn(pJavaScriptParser)
 *  - JavaScriptParser_shiftExpression_return      pJavaScriptParser->shiftExpression(pJavaScriptParser)
 *  - JavaScriptParser_additiveExpression_return      pJavaScriptParser->additiveExpression(pJavaScriptParser)
 *  - JavaScriptParser_muDLTiplicativeExpression_return      pJavaScriptParser->muDLTiplicativeExpression(pJavaScriptParser)
 *  - JavaScriptParser_unaryExpression_return      pJavaScriptParser->unaryExpression(pJavaScriptParser)
 *  - JavaScriptParser_postfixExpression_return      pJavaScriptParser->postfixExpression(pJavaScriptParser)
 *  - JavaScriptParser_primaryExpression_return      pJavaScriptParser->primaryExpression(pJavaScriptParser)
 *  - JavaScriptParser_arrayLiteral_return      pJavaScriptParser->arrayLiteral(pJavaScriptParser)
 *  - JavaScriptParser_objectLiteral_return      pJavaScriptParser->objectLiteral(pJavaScriptParser)
 *  - JavaScriptParser_propertyNameAndValue_return      pJavaScriptParser->propertyNameAndValue(pJavaScriptParser)
 *  - JavaScriptParser_propertyName_return      pJavaScriptParser->propertyName(pJavaScriptParser)
 *  - JavaScriptParser_literal_return      pJavaScriptParser->literal(pJavaScriptParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_JavaScriptParser_H
#define _JavaScriptParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct JavaScriptParser_Ctx_struct JavaScriptParser, * pJavaScriptParser;



	#include <stdlib.h>
	#include <string.h>
	#include <stdlib.h>


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct JavaScriptParser_program_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_program_return;

typedef struct JavaScriptParser_sourceElements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_sourceElements_return;

typedef struct JavaScriptParser_sourceElement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_sourceElement_return;

typedef struct JavaScriptParser_functionDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_functionDeclaration_return;

typedef struct JavaScriptParser_functionExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_functionExpression_return;

typedef struct JavaScriptParser_formalParameterList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_formalParameterList_return;

typedef struct JavaScriptParser_functionBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_functionBody_return;

typedef struct JavaScriptParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_statement_return;

typedef struct JavaScriptParser_statementBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_statementBlock_return;

typedef struct JavaScriptParser_statementList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_statementList_return;

typedef struct JavaScriptParser_variableStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_variableStatement_return;

typedef struct JavaScriptParser_variableDeclarationList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_variableDeclarationList_return;

typedef struct JavaScriptParser_variableDeclarationListNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_variableDeclarationListNoIn_return;

typedef struct JavaScriptParser_variableDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_variableDeclaration_return;

typedef struct JavaScriptParser_variableDeclarationNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_variableDeclarationNoIn_return;

typedef struct JavaScriptParser_initialiser_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_initialiser_return;

typedef struct JavaScriptParser_initialiserNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_initialiserNoIn_return;

typedef struct JavaScriptParser_emptyStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_emptyStatement_return;

typedef struct JavaScriptParser_expressionStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_expressionStatement_return;

typedef struct JavaScriptParser_ifStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_ifStatement_return;

typedef struct JavaScriptParser_iterationStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_iterationStatement_return;

typedef struct JavaScriptParser_doWhileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_doWhileStatement_return;

typedef struct JavaScriptParser_whileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_whileStatement_return;

typedef struct JavaScriptParser_forStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_forStatement_return;

typedef struct JavaScriptParser_forStatementInitialiserPart_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_forStatementInitialiserPart_return;

typedef struct JavaScriptParser_forInStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_forInStatement_return;

typedef struct JavaScriptParser_forInStatementInitialiserPart_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_forInStatementInitialiserPart_return;

typedef struct JavaScriptParser_continueStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_continueStatement_return;

typedef struct JavaScriptParser_breakStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_breakStatement_return;

typedef struct JavaScriptParser_returnStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_returnStatement_return;

typedef struct JavaScriptParser_withStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_withStatement_return;

typedef struct JavaScriptParser_labelledStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_labelledStatement_return;

typedef struct JavaScriptParser_switchStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_switchStatement_return;

typedef struct JavaScriptParser_caseBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_caseBlock_return;

typedef struct JavaScriptParser_caseClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_caseClause_return;

typedef struct JavaScriptParser_defauDLTClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_defauDLTClause_return;

typedef struct JavaScriptParser_throwStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_throwStatement_return;

typedef struct JavaScriptParser_tryStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_tryStatement_return;

typedef struct JavaScriptParser_catchClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_catchClause_return;

typedef struct JavaScriptParser_finallyClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_finallyClause_return;

typedef struct JavaScriptParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_expression_return;

typedef struct JavaScriptParser_expressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_expressionNoIn_return;

typedef struct JavaScriptParser_assignmentExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_assignmentExpression_return;

typedef struct JavaScriptParser_assignmentExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_assignmentExpressionNoIn_return;

typedef struct JavaScriptParser_leftHandSideExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_leftHandSideExpression_return;

typedef struct JavaScriptParser_newExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_newExpression_return;

typedef struct JavaScriptParser_memberExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_memberExpression_return;

typedef struct JavaScriptParser_memberExpressionSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_memberExpressionSuffix_return;

typedef struct JavaScriptParser_callExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_callExpression_return;

typedef struct JavaScriptParser_callExpressionSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_callExpressionSuffix_return;

typedef struct JavaScriptParser_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_arguments_return;

typedef struct JavaScriptParser_indexSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_indexSuffix_return;

typedef struct JavaScriptParser_propertyReferenceSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_propertyReferenceSuffix_return;

typedef struct JavaScriptParser_assignmentOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_assignmentOperator_return;

typedef struct JavaScriptParser_conditionalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_conditionalExpression_return;

typedef struct JavaScriptParser_conditionalExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_conditionalExpressionNoIn_return;

typedef struct JavaScriptParser_logicalORExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_logicalORExpression_return;

typedef struct JavaScriptParser_logicalORExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_logicalORExpressionNoIn_return;

typedef struct JavaScriptParser_logicalANDExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_logicalANDExpression_return;

typedef struct JavaScriptParser_logicalANDExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_logicalANDExpressionNoIn_return;

typedef struct JavaScriptParser_bitwiseORExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_bitwiseORExpression_return;

typedef struct JavaScriptParser_bitwiseORExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_bitwiseORExpressionNoIn_return;

typedef struct JavaScriptParser_bitwiseXORExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_bitwiseXORExpression_return;

typedef struct JavaScriptParser_bitwiseXORExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_bitwiseXORExpressionNoIn_return;

typedef struct JavaScriptParser_bitwiseANDExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_bitwiseANDExpression_return;

typedef struct JavaScriptParser_bitwiseANDExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_bitwiseANDExpressionNoIn_return;

typedef struct JavaScriptParser_equalityExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_equalityExpression_return;

typedef struct JavaScriptParser_equalityExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_equalityExpressionNoIn_return;

typedef struct JavaScriptParser_relationalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_relationalExpression_return;

typedef struct JavaScriptParser_relationalExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_relationalExpressionNoIn_return;

typedef struct JavaScriptParser_shiftExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_shiftExpression_return;

typedef struct JavaScriptParser_additiveExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_additiveExpression_return;

typedef struct JavaScriptParser_muDLTiplicativeExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_muDLTiplicativeExpression_return;

typedef struct JavaScriptParser_unaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_unaryExpression_return;

typedef struct JavaScriptParser_postfixExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_postfixExpression_return;

typedef struct JavaScriptParser_primaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_primaryExpression_return;

typedef struct JavaScriptParser_arrayLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_arrayLiteral_return;

typedef struct JavaScriptParser_objectLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_objectLiteral_return;

typedef struct JavaScriptParser_propertyNameAndValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_propertyNameAndValue_return;

typedef struct JavaScriptParser_propertyName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_propertyName_return;

typedef struct JavaScriptParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    JavaScriptParser_literal_return;



/** Context tracking structure for JavaScriptParser
 */
struct JavaScriptParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     JavaScriptParser_program_return (*program)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_sourceElements_return (*sourceElements)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_sourceElement_return (*sourceElement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_functionDeclaration_return (*functionDeclaration)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_functionExpression_return (*functionExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_formalParameterList_return (*formalParameterList)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_functionBody_return (*functionBody)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_statement_return (*statement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_statementBlock_return (*statementBlock)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_statementList_return (*statementList)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_variableStatement_return (*variableStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_variableDeclarationList_return (*variableDeclarationList)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_variableDeclarationListNoIn_return (*variableDeclarationListNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_variableDeclaration_return (*variableDeclaration)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_variableDeclarationNoIn_return (*variableDeclarationNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_initialiser_return (*initialiser)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_initialiserNoIn_return (*initialiserNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_emptyStatement_return (*emptyStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_expressionStatement_return (*expressionStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_ifStatement_return (*ifStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_iterationStatement_return (*iterationStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_doWhileStatement_return (*doWhileStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_whileStatement_return (*whileStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_forStatement_return (*forStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_forStatementInitialiserPart_return (*forStatementInitialiserPart)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_forInStatement_return (*forInStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_forInStatementInitialiserPart_return (*forInStatementInitialiserPart)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_continueStatement_return (*continueStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_breakStatement_return (*breakStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_returnStatement_return (*returnStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_withStatement_return (*withStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_labelledStatement_return (*labelledStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_switchStatement_return (*switchStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_caseBlock_return (*caseBlock)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_caseClause_return (*caseClause)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_defauDLTClause_return (*defauDLTClause)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_throwStatement_return (*throwStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_tryStatement_return (*tryStatement)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_catchClause_return (*catchClause)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_finallyClause_return (*finallyClause)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_expression_return (*expression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_expressionNoIn_return (*expressionNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_assignmentExpression_return (*assignmentExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_assignmentExpressionNoIn_return (*assignmentExpressionNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_leftHandSideExpression_return (*leftHandSideExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_newExpression_return (*newExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_memberExpression_return (*memberExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_memberExpressionSuffix_return (*memberExpressionSuffix)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_callExpression_return (*callExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_callExpressionSuffix_return (*callExpressionSuffix)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_arguments_return (*arguments)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_indexSuffix_return (*indexSuffix)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_propertyReferenceSuffix_return (*propertyReferenceSuffix)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_assignmentOperator_return (*assignmentOperator)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_conditionalExpression_return (*conditionalExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_conditionalExpressionNoIn_return (*conditionalExpressionNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_logicalORExpression_return (*logicalORExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_logicalORExpressionNoIn_return (*logicalORExpressionNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_logicalANDExpression_return (*logicalANDExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_logicalANDExpressionNoIn_return (*logicalANDExpressionNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_bitwiseORExpression_return (*bitwiseORExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_bitwiseORExpressionNoIn_return (*bitwiseORExpressionNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_bitwiseXORExpression_return (*bitwiseXORExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_bitwiseXORExpressionNoIn_return (*bitwiseXORExpressionNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_bitwiseANDExpression_return (*bitwiseANDExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_bitwiseANDExpressionNoIn_return (*bitwiseANDExpressionNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_equalityExpression_return (*equalityExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_equalityExpressionNoIn_return (*equalityExpressionNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_relationalExpression_return (*relationalExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_relationalExpressionNoIn_return (*relationalExpressionNoIn)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_shiftExpression_return (*shiftExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_additiveExpression_return (*additiveExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_muDLTiplicativeExpression_return (*muDLTiplicativeExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_unaryExpression_return (*unaryExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_postfixExpression_return (*postfixExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_primaryExpression_return (*primaryExpression)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_arrayLiteral_return (*arrayLiteral)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_objectLiteral_return (*objectLiteral)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_propertyNameAndValue_return (*propertyNameAndValue)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_propertyName_return (*propertyName)	(struct JavaScriptParser_Ctx_struct * ctx);
     JavaScriptParser_literal_return (*literal)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred5_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred9_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred21_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred24_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred31_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred34_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred47_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred49_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred60_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred63_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred118_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred121_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred140_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred143_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred146_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred147_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred154_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred158_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred256_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred280_JavaScript)	(struct JavaScriptParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct JavaScriptParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pJavaScriptParser JavaScriptParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pJavaScriptParser JavaScriptParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define DecimalDigit      17
#define EOF      -1
#define Identifier      5
#define SingleStringCharacter      9
#define T__93      93
#define T__94      94
#define T__91      91
#define T__92      92
#define T__90      90
#define Comment      28
#define SingleEscapeCharacter      14
#define UnicodeLetter      24
#define ExponentPart      21
#define WhiteSpace      30
#define T__99      99
#define T__98      98
#define T__97      97
#define T__96      96
#define UnicodeCombiningMark      27
#define T__95      95
#define DLT      4
#define UnicodeDigit      25
#define T__80      80
#define T__81      81
#define NumericLiteral      7
#define T__82      82
#define T__83      83
#define IdentifierStart      22
#define DoubleStringCharacter      8
#define T__85      85
#define T__84      84
#define T__87      87
#define T__86      86
#define T__89      89
#define T__88      88
#define T__71      71
#define T__72      72
#define T__70      70
#define CharacterEscapeSequence      11
#define T__76      76
#define T__75      75
#define T__74      74
#define T__73      73
#define EscapeSequence      10
#define T__79      79
#define UnicodeConnectorPunctuation      26
#define T__78      78
#define T__77      77
#define T__68      68
#define T__69      69
#define T__66      66
#define T__67      67
#define T__64      64
#define T__65      65
#define T__62      62
#define T__63      63
#define HexEscapeSequence      12
#define LineComment      29
#define T__61      61
#define T__60      60
#define HexDigit      18
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__59      59
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define EscapeCharacter      16
#define T__50      50
#define IdentifierPart      23
#define T__42      42
#define T__43      43
#define T__40      40
#define T__41      41
#define T__46      46
#define T__47      47
#define T__44      44
#define T__45      45
#define T__48      48
#define T__49      49
#define UnicodeEscapeSequence      13
#define T__102      102
#define T__101      101
#define T__100      100
#define DecimalLiteral      19
#define StringLiteral      6
#define T__31      31
#define T__32      32
#define T__33      33
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define HexIntegerLiteral      20
#define NonEscapeCharacter      15
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for JavaScriptParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
